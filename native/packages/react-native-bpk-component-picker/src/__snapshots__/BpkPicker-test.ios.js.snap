// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`iOS BpkPicker should render correctly 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  transparent={true}
  visible={false}
>
  <View
    accessibilityComponentType={undefined}
    accessibilityLabel={undefined}
    accessibilityTraits={undefined}
    accessible={true}
    hitSlop={undefined}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
    testID={undefined}
  />
  <View
    style={
      Object {
        "backgroundColor": "rgb(204, 201, 212)",
        "bottom": 0,
        "flexDirection": "column",
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "rgb(243, 242, 245)",
          "borderColor": "rgb(204, 201, 212)",
          "borderTopWidth": 1,
          "flex": 1,
          "flexDirection": "row",
          "justifyContent": "flex-end",
          "paddingHorizontal": 8,
          "paddingVertical": 2,
        }
      }
    >
      <View
        accessibilityComponentType="button"
        accessibilityLabel="Done"
        accessibilityTraits={
          Array [
            "button",
          ]
        }
        accessible={true}
        collapsable={undefined}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "height": 32,
                "justifyContent": "center",
              },
            ]
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            numberOfLines={1}
            style={
              Array [
                Object {
                  "color": "rgb(82, 76, 97)",
                  "fontFamily": "System",
                  "fontSize": 13,
                  "fontWeight": "400",
                },
                Object {
                  "fontWeight": "600",
                },
                Array [
                  Object {
                    "color": "rgb(0, 178, 214)",
                  },
                ],
              ]
            }
          >
            Done
          </Text>
        </View>
      </View>
    </View>
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</Modal>
`;

exports[`iOS BpkPicker should render correctly with a selected value 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  transparent={true}
  visible={false}
>
  <View
    accessibilityComponentType={undefined}
    accessibilityLabel={undefined}
    accessibilityTraits={undefined}
    accessible={true}
    hitSlop={undefined}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
    testID={undefined}
  />
  <View
    style={
      Object {
        "backgroundColor": "rgb(204, 201, 212)",
        "bottom": 0,
        "flexDirection": "column",
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "rgb(243, 242, 245)",
          "borderColor": "rgb(204, 201, 212)",
          "borderTopWidth": 1,
          "flex": 1,
          "flexDirection": "row",
          "justifyContent": "flex-end",
          "paddingHorizontal": 8,
          "paddingVertical": 2,
        }
      }
    >
      <View
        accessibilityComponentType="button"
        accessibilityLabel="Done"
        accessibilityTraits={
          Array [
            "button",
          ]
        }
        accessible={true}
        collapsable={undefined}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "height": 32,
                "justifyContent": "center",
              },
            ]
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            numberOfLines={1}
            style={
              Array [
                Object {
                  "color": "rgb(82, 76, 97)",
                  "fontFamily": "System",
                  "fontSize": 13,
                  "fontWeight": "400",
                },
                Object {
                  "fontWeight": "600",
                },
                Array [
                  Object {
                    "color": "rgb(0, 178, 214)",
                  },
                ],
              ]
            }
          >
            Done
          </Text>
        </View>
      </View>
    </View>
    <View
      style={undefined}
    >
      <RCTPicker
        items={
          Array [
            Object {
              "label": "foo",
              "textColor": undefined,
              "value": "foo",
            },
            Object {
              "label": "bar",
              "textColor": undefined,
              "value": "bar",
            },
          ]
        }
        onChange={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        selectedIndex={0}
        style={
          Array [
            Object {
              "height": 216,
            },
            undefined,
          ]
        }
      />
    </View>
  </View>
</Modal>
`;
