// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`iOS BpkPickerTrigger should render correctly 1`] = `
<BpkTouchableOverlay
  accessibilityComponentType="button"
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  borderRadius={null}
  disabled={false}
  onPress={[Function]}
  onPressIn={null}
  onPressOut={null}
  overlayStyle={null}
  style={null}
>
  <View
    style={
      Object {
        "borderBottomWidth": 1,
        "borderColor": "rgb(230, 228, 235)",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingVertical": 4,
      }
    }
  >
    <BpkIcon
      icon="arrow-down"
      small={true}
      style={null}
    />
  </View>
</BpkTouchableOverlay>
`;

exports[`iOS BpkPickerTrigger should render correctly with a text label 1`] = `
<BpkTouchableOverlay
  accessibilityComponentType="button"
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  borderRadius={null}
  disabled={false}
  onPress={[Function]}
  onPressIn={null}
  onPressOut={null}
  overlayStyle={null}
  style={null}
>
  <View
    style={
      Object {
        "borderBottomWidth": 1,
        "borderColor": "rgb(230, 228, 235)",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingVertical": 4,
      }
    }
  >
    <BpkText
      emphasize={false}
      style={Object {}}
      textStyle="base"
    >
      label
    </BpkText>
    <BpkIcon
      icon="arrow-down"
      small={true}
      style={null}
    />
  </View>
</BpkTouchableOverlay>
`;

exports[`iOS BpkPickerTrigger should render correctly with an element label 1`] = `
<BpkTouchableOverlay
  accessibilityComponentType="button"
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  borderRadius={null}
  disabled={false}
  onPress={[Function]}
  onPressIn={null}
  onPressOut={null}
  overlayStyle={null}
  style={null}
>
  <View
    style={
      Object {
        "borderBottomWidth": 1,
        "borderColor": "rgb(230, 228, 235)",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingVertical": 4,
      }
    }
  >
    <View />
    <BpkIcon
      icon="arrow-down"
      small={true}
      style={null}
    />
  </View>
</BpkTouchableOverlay>
`;

exports[`iOS BpkPickerTrigger should render correctly with custom styles 1`] = `
<BpkTouchableOverlay
  accessibilityComponentType="button"
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  borderRadius={null}
  disabled={false}
  onPress={[Function]}
  onPressIn={null}
  onPressOut={null}
  overlayStyle={null}
  style={
    Object {
      "marginTop": 10,
    }
  }
>
  <View
    style={
      Object {
        "borderBottomWidth": 1,
        "borderColor": "rgb(230, 228, 235)",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingVertical": 4,
      }
    }
  >
    <BpkText
      emphasize={false}
      style={Object {}}
      textStyle="base"
    >
      label
    </BpkText>
    <BpkIcon
      icon="arrow-down"
      small={true}
      style={null}
    />
  </View>
</BpkTouchableOverlay>
`;

exports[`iOS BpkPickerTrigger should render correctly with the disabled prop 1`] = `
<BpkTouchableOverlay
  accessibilityComponentType="button"
  accessibilityTraits={
    Array [
      "button",
      "disabled",
    ]
  }
  borderRadius={null}
  disabled={true}
  onPress={[Function]}
  onPressIn={null}
  onPressOut={null}
  overlayStyle={null}
  style={null}
>
  <View
    style={
      Object {
        "borderBottomWidth": 1,
        "borderColor": "rgb(230, 228, 235)",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingVertical": 4,
      }
    }
  >
    <BpkText
      emphasize={false}
      style={
        Object {
          "color": "rgb(230, 228, 235)",
        }
      }
      textStyle="base"
    >
      label
    </BpkText>
    <BpkIcon
      icon="arrow-down"
      small={true}
      style={null}
    />
  </View>
</BpkTouchableOverlay>
`;
